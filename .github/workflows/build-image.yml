name: Use Packer To Build Custom Image

on:
  push:
    branches:
      - main

jobs:
  image_build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        cloud: [aws]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install --omit=dev  

      - name: Package Application
        run: tar -czf app.tar.gz index.js package.json

      - name: Check if artifact file exists before uploading
        run: |
          if [ -f "app.tar.gz" ]; then
            echo "File app.tar.gz exists. Proceeding to upload."
          else
            echo "File app.tar.gz does not exist. Skipping upload."
            exit 0
          fi

      - name: Upload application artifact (if exists)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: application-artifact-${{ matrix.cloud }}
          path: app.tar.gz





      - name: Install Packer
        run: |
          if ! command -v packer &> /dev/null; then
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
            sudo apt update && sudo apt install -y packer
          fi

      - name: Set up AWS Client Interface
        if: matrix.cloud == 'aws'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Download application artifact
        uses: actions/download-artifact@v4
        with:
          name: application-artifact-${{ matrix.cloud }}

      - name: Extract application artifact
        run: tar -xzf app.tar.gz -C .

      - name: Run packer init
        run: packer init machine-image.pkr.hcl

      - name: Build Packer Image
        if: matrix.cloud == 'aws'
        run: |
          packer build \
          -only=my-first-build.amazon-ebs.my-aws-ami \
          -var "cloud=${{ matrix.cloud }}" \
          machine-image.pkr.hcl

      - name: Get AWS AMI ID
        if: matrix.cloud == 'aws'
        run: |
          AMI_ID=$(aws ec2 describe-images --owners self --query 'Images[-1].ImageId' --output text)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
  
      - name: Share AWS AMI with DEMO Account
        if: matrix.cloud == 'aws'
        run: |
            aws ec2 modify-image-attribute --image-id $AMI_ID --launch-permission "Add=[{UserId='${{ secrets.DEMO_AWS_ACCOUNT_ID }}'}]" --region us-east-1
            echo "AWS AMI Shared with DEMO Account"
      
      - name: Configure AWS CLI for DEMO account
        if: matrix.cloud == 'aws'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_KEY }}
          aws-region: us-east-1
      
      - name: Create new Launch Template version with latest AMI
        if: matrix.cloud == 'aws'
        run: |
          echo "Getting the newest version of the launch template: csye6225-asg-launch-template..."
          LATEST_VERSION=$(aws ec2 describe-launch-templates \
            --launch-template-names "csye6225-asg-launch-template" \
            --query 'LaunchTemplates[0].LatestVersionNumber' \
            --output text)

          echo "Latest version: $LATEST_VERSION"

          echo "Creating new LT version using AMI: $AMI_ID"
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-name "csye6225-asg-launch-template" \
            --source-version "$LATEST_VERSION" \
            --version-description "Updated by GitHub Action run ${{ github.run_id }}" \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)

          echo "Created Launch Template version: $NEW_VERSION"
          echo "NEW_LT_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update Auto Scaling Group to use latest Launch Template Version
        if: matrix.cloud == 'aws'
        run: |
          echo "Updating Auto Scaling Group to use LT version $NEW_LT_VERSION"
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name csye6225-as-group \
            --launch-template "LaunchTemplateName=csye6225-asg-launch-template,Version=$NEW_LT_VERSION"

      - name: Issue Instance Refresh
        if: matrix.cloud == 'aws'
        run: |
          echo "Issuing instance refresh command to Auto Scaling Group..."
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name csye6225-as-group \
            --strategy Rolling \
            --query 'InstanceRefreshId' \
            --output text)
          echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV
          echo "Started instance refresh with ID: $REFRESH_ID"

      - name: Wait for Instance Refresh to complete before exiting
        if: matrix.cloud == 'aws'
        run: |
          echo "Waiting for instance refresh to complete..."
          STATUS="InProgress"
          while [ "$STATUS" = "InProgress" ]; do
            sleep 20
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name csye6225-as-group \
              --instance-refresh-ids "$REFRESH_ID" \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
            echo "Current status: $STATUS"
          done

          if [ "$STATUS" != "Successful" ]; then
            echo "Instance refresh did not succeed. Final status: $STATUS"
            exit 1
          fi

          echo "All instances refreshed successfully â€” deployment complete!"

  
